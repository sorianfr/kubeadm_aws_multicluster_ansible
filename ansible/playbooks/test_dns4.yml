- name: Modify and Apply CoreDNS ConfigMap
  hosts: controlplanes
  become: yes
  gather_facts: no
  vars_files:
    - ../vars.yml
  tasks:
    - name: Set the current cluster name
      set_fact:
        cluster_name: "{{ inventory_hostname | regex_replace('controlplane', '') }}"

    - name: Set peer clusters (excluding the current cluster)
      set_fact:
        peer_clusters: >-
          {{
            kubernetes_clusters.keys()
            | reject('equalto', cluster_name)
            | list
          }}

    - name: Build DNS peer list
      set_fact:
        dns_peers: >-
          [{% for peer in peer_clusters %}
           {
            "name": "{{ peer }}",
            "dns_ip": "{{ kubernetes_clusters[peer].service_cidr | regex_replace('/.*$', '') | regex_replace('\.0$', '') }}.10"
           }{% if not loop.last %},{% endif %}
           {% endfor %}]

    # Task 1: Backup original ConfigMap
    - name: Save original CoreDNS ConfigMap
      command: kubectl get configmap -n kube-system coredns -o yaml > coredns-configmap-original.yaml
      args:
        chdir: /tmp
      changed_when: false

    # Task 2: Create working copy
    - name: Create modified ConfigMap file
      copy:
        src: /tmp/coredns-configmap-original.yaml
        dest: /tmp/coredns-configmap-modified.yaml
        remote_src: yes

    # Task 3: Replace resolv.conf with public DNS
    - name: Update forward DNS servers
      command: sed -i 's|forward . /etc/resolv.conf|forward . 8.8.8.8 1.1.1.1|g' /tmp/coredns-configmap-modified.yaml
      changed_when: false

    # Task 4: Add peer clusters DNS forwarding
    - name: Add peer cluster DNS configurations
      command: >-
        sed -i '/^    }/a \    {{ item.name }}.local:53 {\n        errors\n        cache 30\n        forward . {{ item.dns_ip }}\n    }'
        /tmp/coredns-configmap-modified.yaml
      loop: "{{ dns_peers }}"
      changed_when: false

    # Task 5: Add custom imports
    - name: Add custom imports configuration
      command: >-
        sed -i '/^kind: ConfigMap$/i \    import /etc/coredns/custom/*.server'
        /tmp/coredns-configmap-modified.yaml
      changed_when: false

    # Task 6: Apply modified ConfigMap
    - name: Apply modified CoreDNS ConfigMap
      command: kubectl apply -f /tmp/coredns-configmap-modified.yaml -n kube-system
      register: apply_result
      changed_when: "'configured' in apply_result.stdout"

    # Task 7: Restart CoreDNS
    - name: Restart CoreDNS pods
      command: kubectl rollout restart deployment coredns -n kube-system
      when: apply_result is changed